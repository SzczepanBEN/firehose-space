---
import BaseLayout from '../layouts/BaseLayout.astro';

// Get sort type from URL params
const url = new URL(Astro.request.url);
const sort = url.searchParams.get('sort') || 'hot';

// Fetch posts from API
let posts = [];
let error = null;

try {
  // For SSR, we'll need to make internal API calls
  // For now, we'll use mock data and implement client-side loading
  const mockPosts = [
    {
      id: '1',
      type: 'link',
      title: 'Building the future of web development',
      url: 'https://example.com/article',
      domain: 'example.com',
      author_id: 'user1',
      author_display_name: 'John Doe',
      author_avatar_url: null,
      score: 42,
      comments_count: 5,
      created_at: Date.now() - 3600000, // 1 hour ago
      hotness: 0.8
    },
    {
      id: '2', 
      type: 'self',
      title: 'My thoughts on the current state of AI',
      url: null,
      domain: null,
      author_id: 'user2',
      author_display_name: 'Jane Smith',
      author_avatar_url: null,
      score: 28,
      comments_count: 12,
      created_at: Date.now() - 7200000, // 2 hours ago  
      hotness: 0.6
    }
  ];
  
  posts = mockPosts;
} catch (e) {
  console.error('Failed to fetch posts:', e);
  error = 'Failed to load posts';
}

function getTimeAgo(timestamp: number): string {
  const now = Date.now();
  const diff = now - timestamp;
  const minutes = Math.floor(diff / 60000);
  const hours = Math.floor(diff / 3600000);
  const days = Math.floor(diff / 86400000);

  if (days > 0) return `${days}d ago`;
  if (hours > 0) return `${hours}h ago`;
  if (minutes > 0) return `${minutes}m ago`;
  return 'just now';
}
---

<BaseLayout title="Firehose" description="The global feed of links and articles. No gatekeeping, just pure content flow.">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    
    

    <!-- Feed Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between mb-6">
        
        <!-- View switcher -->
        <div class="flex items-center space-x-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
          <a 
            href="/" 
            class="px-3 py-1 rounded-md text-sm font-medium bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300"
          >
            Hot
          </a>
          <a 
            href="/new" 
            class="px-3 py-1 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"
          >
            New
          </a>
          <a 
            href="/top" 
            class="px-3 py-1 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"
          >
            Top
          </a>
        </div>
      </div>
      

    </div>



    <!-- Posts Feed -->
    <div id="posts-container" class="space-y-4">
      {error && (
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
          <p class="text-red-800 dark:text-red-200">{error}</p>
        </div>
      )}
      
      {posts.map((post, index) => (
        <article class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow">
          <div class="p-6">
            
            <!-- Post header -->
            <div class="flex items-start space-x-3">
              
              <!-- Vote buttons -->
              <div class="flex flex-col items-center space-y-1 flex-shrink-0">
                <button class="text-gray-400 hover:text-orange-600 dark:hover:text-orange-400 transition-colors">
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd"></path>
                  </svg>
                </button>
                <span class="text-sm font-semibold text-gray-700 dark:text-gray-300">
                  {post.score}
                </span>
                <button class="text-gray-400 hover:text-red-600 dark:hover:text-red-400 transition-colors">
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                  </svg>
                </button>
              </div>

              <!-- Post content -->
              <div class="flex-1 min-w-0">
                
                <!-- Title and domain -->
                <div class="mb-2">
                  <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                    {post.type === 'link' ? (
                      <a 
                        href={`/p/${post.id}`} 
                        class="hover:text-orange-600 dark:hover:text-orange-400 transition-colors"
                      >
                        {post.title}
                      </a>
                    ) : (
                      <a 
                        href={`/p/${post.id}`}
                        class="hover:text-orange-600 dark:hover:text-orange-400 transition-colors"
                      >
                        {post.title}
                      </a>
                    )}
                  </h2>
                  
                  {post.domain && (
                    <div class="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
                      <span>({post.domain})</span>
                      <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                      </svg>
                    </div>
                  )}
                </div>

                <!-- Post metadata -->
                <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                  <div class="flex items-center space-x-1">
                    <img 
                      src={post.author_avatar_url || '/default-avatar.svg'} 
                      alt={post.author_display_name}
                      class="w-5 h-5 rounded-full"
                    >
                    <span>by <a href={`/u/${post.author_id}`} class="font-medium text-gray-900 dark:text-white hover:text-orange-600 dark:hover:text-orange-400 transition-colors">{post.author_display_name}</a></span>
                  </div>
                  
                  <span>{getTimeAgo(post.created_at)}</span>
                  
                  <a 
                    href={`/p/${post.id}#comments`}
                    class="flex items-center space-x-1 hover:text-orange-600 dark:hover:text-orange-400 transition-colors"
                  >
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
                    </svg>
                    <span>{post.comments_count} comments</span>
                  </a>


                </div>
              </div>
            </div>
          </div>
        </article>
      ))}
    </div>

    <!-- Load more -->
    <div class="mt-8 text-center">
      <button 
        id="load-more-btn"
        class="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 px-6 py-3 rounded-lg font-medium transition-colors"
      >
        Load More Posts
      </button>
    </div>
  </div>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Load fresh posts on page load
    loadPosts();
    
    // Handle vote buttons
    setupVoteHandlers();
    
    // Handle load more
    const loadMoreBtn = document.getElementById('load-more-btn');
    loadMoreBtn?.addEventListener('click', loadMorePosts);
  });

  let currentOffset = 0;
  const postsPerPage = 25;

  async function loadPosts(append = false) {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const sort = urlParams.get('sort') || 'new';
      
      // Add auth header if user is logged in
      const headers = {};
      const authToken = window.getAuthToken();
      if (authToken) {
        headers['Authorization'] = `Bearer ${authToken}`;
      }
      
      const response = await fetch(`/api/posts/feed?sort=${sort}&limit=${postsPerPage}&offset=${append ? currentOffset : 0}`, {
        headers
      });
      
      if (!response.ok) {
        throw new Error('Failed to load posts');
      }
      
      const data = await response.json();
      
      if (append) {
        appendPosts(data.posts);
      } else {
        renderPosts(data.posts);
        currentOffset = data.posts.length;
      }
      
      // Hide/show load more button
      const loadMoreBtn = document.querySelector('#load-more-btn');
      if (loadMoreBtn) {
        loadMoreBtn.style.display = data.pagination.hasMore ? 'block' : 'none';
      }
      
    } catch (error) {
      console.error('Failed to load posts:', error);
      showError('Failed to load posts. Please refresh the page.');
    }
  }

  async function loadMorePosts() {
    currentOffset += postsPerPage;
    await loadPosts(true);
  }

  function renderPosts(posts) {
    const container = document.getElementById('posts-container');
    if (!container) return;
    
    container.innerHTML = posts.map(post => createPostHTML(post)).join('');
    
    // Extract and display thumbnails for all posts
    posts.forEach(post => extractAndDisplayThumbnail(post));
    
    // 📊 Analytics: Track feed view
    if (typeof window.analytics !== 'undefined') {
      const urlParams = new URLSearchParams(window.location.search);
      const sortType = urlParams.get('sort') || 'new';
      window.analytics.track('Feed Viewed', {
        sort_type: sortType,
        posts_count: posts.length,
        page_url: window.location.pathname + window.location.search
      });
    }
    
    setupVoteHandlers();
    setupPostClickTracking();
  }

  function appendPosts(posts) {
    const container = document.getElementById('posts-container');
    if (!container) return;
    
    const postsHTML = posts.map(post => createPostHTML(post)).join('');
    container.insertAdjacentHTML('beforeend', postsHTML);
    
    // Extract and display thumbnails for new posts
    posts.forEach(post => extractAndDisplayThumbnail(post));
    
    setupVoteHandlers();
    setupPostClickTracking();
  }

  function createPostHTML(post) {
    return `
      <article class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow">
        <div class="p-6">
          <div class="flex items-start space-x-3">
            <!-- Vote buttons -->
            <div class="flex flex-col items-center space-y-1 flex-shrink-0">
              <button class="text-gray-400 hover:text-orange-600 dark:hover:text-orange-400 transition-colors" data-vote="up" data-post-id="${post.id}">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd"></path>
                </svg>
              </button>
              <span class="text-sm font-semibold text-gray-700 dark:text-gray-300" data-score="${post.id}">
                ${post.score}
              </span>
              <button class="text-gray-400 hover:text-red-600 dark:hover:text-red-400 transition-colors" data-vote="down" data-post-id="${post.id}">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
              </button>
            </div>

            <!-- Post content -->
            <div class="flex-1 min-w-0">
              <div class="mb-2">
                <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                  <a href="/p/${post.slug || post.id}" class="hover:text-orange-600 dark:hover:text-orange-400 transition-colors">
                    ${post.title}
                  </a>
                </h2>
                
                <!-- Featured Image (thumbnail) -->
                <div id="thumbnail-${post.id}" class="mb-3 mt-2 hidden">
                  <img class="w-full max-w-sm h-32 object-cover rounded-lg shadow-sm" alt="Post thumbnail" />
                </div>
                
                ${post.domain ? `
                <div class="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
                  <span>(${post.domain})</span>
                  <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                  </svg>
                </div>
                ` : ''}
              </div>

              <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                <div class="flex items-center space-x-1">
                  <img src="${post.author_avatar_url || '/default-avatar.svg'}" alt="${post.author_display_name}" class="w-5 h-5 rounded-full">
                  <span>by <a href="/u/${post.author_id}" class="font-medium text-gray-900 dark:text-white hover:text-orange-600 dark:hover:text-orange-400 transition-colors">${post.author_display_name}</a></span>
                </div>
                
                <span>${getTimeAgo(post.created_at)}</span>
                
                                     ${post.can_edit ? `
                       <a href="/p/${post.slug || post.id}/edit" class="flex items-center space-x-1 text-orange-600 dark:text-orange-400 hover:text-orange-700 dark:hover:text-orange-500 transition-colors">
                         <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                           <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                         </svg>
                         <span>Edit</span>
                       </a>
                     ` : ''}


              </div>
            </div>
          </div>
        </div>
      </article>
    `;
  }

  function setupVoteHandlers() {
    const voteButtons = document.querySelectorAll('button[data-vote]');
    
    voteButtons.forEach(button => {
      button.replaceWith(button.cloneNode(true)); // Remove existing listeners
    });
    
    document.querySelectorAll('button[data-vote]').forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        
        const voteType = button.dataset.vote;
        const postId = button.dataset.postId;
        const authToken = localStorage.getItem('auth_token');
        
        if (!authToken) {
          window.location.href = '/login';
          return;
        }
        
        try {
          const response = await fetch(`/api/posts/${postId}/vote`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${authToken}`
            },
            body: JSON.stringify({ vote_type: voteType })
          });

          if (response.ok) {
            const result = await response.json();
            const scoreElement = document.querySelector(`[data-score="${postId}"]`);
            if (scoreElement) {
              scoreElement.textContent = result.new_score;
            }
            
            // Update button states
            updateVoteButtonStates(postId, voteType);

            // 📊 Analytics: Track vote
            if (typeof window.analytics !== 'undefined') {
              window.analytics.track('Post Voted', {
                post_id: postId,
                vote_type: voteType,
                new_score: result.new_score
              });
            }
          } else if (response.status === 401) {
            localStorage.removeItem('auth_token');
            window.location.href = '/login';
          } else {
            const error = await response.json();
            console.error('Vote error:', error);
          }
        } catch (error) {
          console.error('Vote error:', error);
        }
      });
    });
  }

  function updateVoteButtonStates(postId, voteType) {
    const upBtn = document.querySelector(`[data-vote="up"][data-post-id="${postId}"]`);
    const downBtn = document.querySelector(`[data-vote="down"][data-post-id="${postId}"]`);
    
    // Reset states
    upBtn?.classList.remove('text-orange-600');
    downBtn?.classList.remove('text-red-600');
    
    // Set active state
    if (voteType === 'up') {
      upBtn?.classList.add('text-orange-600');
    } else {
      downBtn?.classList.add('text-red-600');
    }
  }

  function showError(message) {
    const container = document.getElementById('posts-container');
    if (container) {
      container.innerHTML = `
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
          <p class="text-red-800 dark:text-red-200">${message}</p>
        </div>
      `;
    }
  }

  function getTimeAgo(timestamp) {
    const now = Date.now();
    // Convert timestamp from seconds to milliseconds if needed
    const postTime = timestamp > 1000000000000 ? timestamp : timestamp * 1000;
    const diff = now - postTime;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (days > 0) return `${days}d ago`;
    if (hours > 0) return `${hours}h ago`;
    if (minutes > 0) return `${minutes}m ago`;
    return 'just now';
  }
  
  function extractAndDisplayThumbnail(post) {
    let imageUrl = null;
    
    // 1. First priority: image_url from form (user-provided image)
    if (post.image_url) {
      imageUrl = post.image_url;
    }
    // 2. Second priority: if it's a link post with direct image URL
    else if (post.type === 'link' && post.url) {
      const url = post.url.toLowerCase();
      if (url.match(/\.(jpg|jpeg|png|gif|webp|svg)(\?|$)/)) {
        imageUrl = post.url;
      }
    }
    // 3. Third priority: extract first image from markdown content
    else if (post.body_markdown) {
      // Match markdown image syntax: ![alt](url)
      const imageMatch = post.body_markdown.match(/!\[.*?\]\((https?:\/\/[^\s)]+)\)/);
      if (imageMatch) {
        imageUrl = imageMatch[1];
      }
    }
    
    // 3. Display the image if found
    if (imageUrl) {
      const imageContainer = document.getElementById(`thumbnail-${post.id}`);
      const img = imageContainer?.querySelector('img');
      
      if (img && imageContainer) {
        img.src = imageUrl;
        img.alt = post.title;
        imageContainer.classList.remove('hidden');
        
        // Handle image load errors
        img.onerror = function() {
          imageContainer.classList.add('hidden');
        };
      }
    }
  }

  function setupPostClickTracking() {
    // Track post title clicks (article views)
    document.querySelectorAll('a[href^="/p/"]').forEach(link => {
      link.addEventListener('click', (e) => {
        const postId = link.closest('article')?.querySelector('[data-post-id]')?.dataset.postId;
        const href = link.getAttribute('href');
        
        if (typeof window.analytics !== 'undefined' && postId) {
          window.analytics.track('Post Clicked', {
            post_id: postId,
            post_url: href,
            source: 'feed'
          });
        }
      });
    });

    // Track external link clicks
    document.querySelectorAll('a[href^="http"]:not([href*="firehose.space"])').forEach(link => {
      link.addEventListener('click', (e) => {
        if (typeof window.analytics !== 'undefined') {
          window.analytics.track('External Link Clicked', {
            url: link.href,
            domain: new URL(link.href).hostname,
            source: 'feed'
          });
        }
      });
    });

    // Track author profile clicks
    document.querySelectorAll('a[href^="/u/"]').forEach(link => {
      link.addEventListener('click', (e) => {
        if (typeof window.analytics !== 'undefined') {
          window.analytics.track('Author Profile Clicked', {
            author_id: link.getAttribute('href').replace('/u/', ''),
            source: 'feed'
          });
        }
      });
    });
  }
</script>

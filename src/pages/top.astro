---
import BaseLayout from '../layouts/BaseLayout.astro';

// Get time period from URL params
const url = new URL(Astro.request.url);
const period = url.searchParams.get('t') || '24h';
---

<BaseLayout title="Top Posts" description="Most upvoted posts on Firehose.space">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    
    <!-- Feed Header -->
    <div class="mb-8">
      <div class="flex items-center justify-between mb-6">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
          üèÜ Top Posts
        </h1>
        
        <!-- View switcher -->
        <div class="flex items-center space-x-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
          <a 
            href="/" 
            class="px-3 py-1 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"
          >
            Hot
          </a>
          <a 
            href="/new" 
            class="px-3 py-1 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"
          >
            New
          </a>
          <a 
            href="/top" 
            class="px-3 py-1 rounded-md text-sm font-medium bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300"
          >
            Top
          </a>
        </div>
      </div>
      
      <!-- Time period selector -->
      <div class="flex items-center space-x-4 mb-6">
        <span class="text-gray-600 dark:text-gray-400 font-medium">Time period:</span>
        <div class="flex items-center space-x-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
          <a 
            href="/top?t=24h" 
            class={`px-3 py-1 rounded-md text-sm font-medium ${
              period === '24h' 
                ? 'bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300' 
                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
            }`}
          >
            24h
          </a>
          <a 
            href="/top?t=7d" 
            class={`px-3 py-1 rounded-md text-sm font-medium ${
              period === '7d' 
                ? 'bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300' 
                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
            }`}
          >
            7d
          </a>
          <a 
            href="/top?t=30d" 
            class={`px-3 py-1 rounded-md text-sm font-medium ${
              period === '30d' 
                ? 'bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300' 
                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
            }`}
          >
            30d
          </a>
          <a 
            href="/top?t=all" 
            class={`px-3 py-1 rounded-md text-sm font-medium ${
              period === 'all' 
                ? 'bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300' 
                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
            }`}
          >
            All
          </a>
        </div>
      </div>
      
      <p class="text-gray-600 dark:text-gray-400 text-lg">
        {period === '24h' ? 'Most upvoted posts from the last 24 hours.' :
         period === '7d' ? 'Most upvoted posts from the last week.' :
         period === '30d' ? 'Most upvoted posts from the last month.' :
         'All-time most upvoted posts.'}
      </p>
    </div>

    <!-- Submit Call-to-Action -->
    <div class="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-gray-800 dark:to-gray-700 rounded-lg p-6 mb-8 border border-purple-100 dark:border-gray-600">
      <div class="flex items-center justify-between">
        <div>
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            Create the next top post
          </h3>
          <p class="text-gray-600 dark:text-gray-400">
            Share something amazing and let the community vote it to the top.
          </p>
        </div>
        <a 
          href="/submit" 
          class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-3 rounded-lg font-medium transition-colors flex-shrink-0 ml-6"
        >
          Submit Post
        </a>
      </div>
    </div>

    <!-- Posts Feed -->
    <div id="posts-container" class="space-y-4">
      <!-- Posts will be loaded dynamically -->
      <div class="flex items-center justify-center py-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600"></div>
        <span class="ml-3 text-gray-600 dark:text-gray-400">Loading top posts...</span>
      </div>
    </div>

    <!-- Load more -->
    <div class="mt-8 text-center">
      <button 
        id="load-more-btn"
        class="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 px-6 py-3 rounded-lg font-medium transition-colors"
        style="display: none;"
      >
        Load More Posts
      </button>
    </div>
  </div>
</BaseLayout>

<script define:vars={{ period }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Load posts with current period
    loadPosts('top', period);
    
    // Handle load more
    const loadMoreBtn = document.getElementById('load-more-btn');
    loadMoreBtn?.addEventListener('click', () => loadMorePosts('top', period));
  });

  let currentOffset = 0;
  const postsPerPage = 25;

  async function loadPosts(sort = 'top', timePeriod = '24h', append = false) {
    try {
      const response = await fetch(`/api/posts/feed?sort=${sort}&period=${timePeriod}&limit=${postsPerPage}&offset=${append ? currentOffset : 0}`);
      
      if (!response.ok) {
        throw new Error('Failed to load posts');
      }
      
      const data = await response.json();
      
      if (append) {
        appendPosts(data.posts);
      } else {
        renderPosts(data.posts);
        currentOffset = data.posts.length;
      }
      
      // Hide/show load more button
      const loadMoreBtn = document.getElementById('load-more-btn');
      if (loadMoreBtn) {
        loadMoreBtn.style.display = data.pagination.hasMore ? 'block' : 'none';
      }
      
    } catch (error) {
      console.error('Failed to load posts:', error);
      showError('Failed to load posts. Please refresh the page.');
    }
  }

  async function loadMorePosts(sort = 'top', timePeriod = '24h') {
    currentOffset += postsPerPage;
    await loadPosts(sort, timePeriod, true);
  }

  function renderPosts(posts) {
    const container = document.getElementById('posts-container');
    if (!container) return;
    
    if (posts.length === 0) {
      container.innerHTML = `
        <div class="text-center py-12">
          <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No top posts yet</h3>
          <p class="text-gray-500 dark:text-gray-400 mb-4">No posts have received enough votes in this time period.</p>
          <a href="/submit" class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
            Submit First Post
          </a>
        </div>
      `;
      return;
    }
    
    container.innerHTML = posts.map((post, index) => createPostHTML(post, index + 1)).join('');
    setupVoteHandlers();
  }

  function appendPosts(posts) {
    const container = document.getElementById('posts-container');
    if (!container) return;
    
    const startRank = container.children.length + 1;
    const postsHTML = posts.map((post, index) => createPostHTML(post, startRank + index)).join('');
    container.insertAdjacentHTML('beforeend', postsHTML);
    setupVoteHandlers();
  }

  function createPostHTML(post, rank) {
    return `
      <article class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow">
        <div class="p-6">
          <div class="flex items-start space-x-3">
            <!-- Rank -->
            <div class="flex-shrink-0 w-8 text-center">
              <span class="text-lg font-bold text-gray-500 dark:text-gray-400">${rank}</span>
            </div>

            <!-- Vote buttons -->
            <div class="flex flex-col items-center space-y-1 flex-shrink-0">
              <button class="text-gray-400 hover:text-orange-600 dark:hover:text-orange-400 transition-colors" data-vote="up" data-post-id="${post.id}">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd"></path>
                </svg>
              </button>
              <span class="text-sm font-semibold text-gray-700 dark:text-gray-300" data-score="${post.id}">
                ${post.score}
              </span>
              <button class="text-gray-400 hover:text-red-600 dark:hover:text-red-400 transition-colors" data-vote="down" data-post-id="${post.id}">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
              </button>
            </div>

            <!-- Post content -->
            <div class="flex-1 min-w-0">
              <div class="mb-2">
                <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                  <a href="/p/${post.slug || post.id}" class="hover:text-orange-600 dark:hover:text-orange-400 transition-colors">
                    ${post.title}
                  </a>
                </h2>
                
                ${post.domain ? `
                <div class="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
                  <span>(${post.domain})</span>
                  <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                  </svg>
                </div>
                ` : ''}
              </div>

              <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                <div class="flex items-center space-x-1">
                  <img src="${post.author_avatar_url || '/default-avatar.svg'}" alt="${post.author_display_name}" class="w-5 h-5 rounded-full">
                  <span>by <strong>${post.author_display_name}</strong></span>
                </div>
                
                <span>${getTimeAgo(post.created_at)}</span>
                
                <a href="/p/${post.slug || post.id}#comments" class="flex items-center space-x-1 hover:text-orange-600 dark:hover:text-orange-400 transition-colors">
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
                  </svg>
                  <span>${post.comments_count} comments</span>
                </a>

                ${post.clicks ? `<span>${post.clicks} clicks</span>` : ''}

                ${post.type === 'self' ? '<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">Self Post</span>' : ''}
              </div>
            </div>
          </div>
        </div>
      </article>
    `;
  }

  function setupVoteHandlers() {
    document.querySelectorAll('button[data-vote]').forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        
        const voteType = button.dataset.vote;
        const postId = button.dataset.postId;
        const authToken = localStorage.getItem('auth_token');
        
        if (!authToken) {
          window.location.href = '/login';
          return;
        }
        
        try {
          const response = await fetch(`/api/posts/${postId}/vote`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${authToken}`
            },
            body: JSON.stringify({ vote_type: voteType })
          });

          if (response.ok) {
            const result = await response.json();
            const scoreElement = document.querySelector(`[data-score="${postId}"]`);
            if (scoreElement) {
              scoreElement.textContent = result.new_score;
            }
          }
        } catch (error) {
          console.error('Vote error:', error);
        }
      });
    });
  }

  function showError(message) {
    const container = document.getElementById('posts-container');
    if (container) {
      container.innerHTML = `
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
          <p class="text-red-800 dark:text-red-200">${message}</p>
        </div>
      `;
    }
  }

  function getTimeAgo(timestamp) {
    const now = Date.now();
    const diff = now - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (days > 0) return `${days}d ago`;
    if (hours > 0) return `${hours}h ago`;
    if (minutes > 0) return `${minutes}m ago`;
    return 'just now';
  }
</script>

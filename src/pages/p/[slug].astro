---
import BaseLayout from '../../layouts/BaseLayout.astro';

// Dynamic route - disable prerendering for server-side rendering
export const prerender = false;

const { slug } = Astro.params;

// Fetch post data for meta tags
let post = null;
let pageTitle = 'Post - Firehose';
let pageDescription = 'Read and discuss this post on Firehose';
let pageOgImage = `https://firehose.space/api/og/post/${slug}`;

try {
  // Make internal API call to get post data
  const workerUrl = 'https://firehose.space/api/posts/' + slug;
  const response = await fetch(workerUrl);
  
  if (response.ok) {
    post = await response.json();
    
    // Set dynamic meta content
    pageTitle = `${post.title} - Firehose`;
    
    // Extract first paragraph for description (limit to 160 chars)
    let description = post.title; // Fallback to title
    if (post.type === 'self' && post.body_markdown) {
      // Extract first paragraph from markdown
      const firstParagraph = post.body_markdown
        .split('\n')
        .find(line => line.trim().length > 0 && !line.startsWith('#'))
        ?.replace(/\*\*([^*]+)\*\*/g, '$1') // Remove bold markers
        .replace(/\*([^*]+)\*/g, '$1')     // Remove italic markers
        .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // Remove link markers
        .trim();
      
      if (firstParagraph && firstParagraph.length > 20) {
        description = firstParagraph.length > 160 
          ? firstParagraph.substring(0, 157) + '...'
          : firstParagraph;
      }
    }
    pageDescription = description;
    
    // Use post image if available
    if (post.image_url) {
      pageOgImage = post.image_url;
    }
  }
} catch (error) {
  console.error('Failed to fetch post for meta tags:', error);
  // Use defaults
}

const canonicalUrl = `https://firehose.space/p/${slug}`;
---

<BaseLayout 
  title={pageTitle}
  description={pageDescription}
  canonicalUrl={canonicalUrl}
  ogImage={pageOgImage}
>
  
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    
    <!-- Loading State -->
    <div id="loading" class="text-center py-12">
      <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500"></div>
      <p class="mt-4 text-gray-600 dark:text-gray-400">Loading post...</p>
    </div>
    
    <!-- Post Content (will be populated by JavaScript) -->
    <div id="post-content" class="hidden">
      <!-- Dynamic content loaded here -->
    </div>
    
    <!-- 404 Error -->
    <div id="error-404" class="hidden text-center py-12">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Post Not Found</h1>
      <p class="text-gray-600 dark:text-gray-400 mb-6">The post you're looking for doesn't exist or has been removed.</p>
      <a href="/" class="bg-orange-600 hover:bg-orange-700 text-white px-6 py-2 rounded-lg transition-colors">Go Home</a>
    </div>
  </div>

<script>
           // Load post data and render content
         document.addEventListener('DOMContentLoaded', async () => {
           const slug = window.location.pathname.split('/p/')[1];

           try {
             // Use the individual post API endpoint instead of searching the feed
             const authToken = window.getAuthToken();
             const headers = {};
             if (authToken) {
               headers['Authorization'] = `Bearer ${authToken}`;
             }
             
             const response = await fetch(`/api/posts/${slug}`, { headers });
             if (!response.ok) {
               if (response.status === 404) {
                 document.getElementById('loading').classList.add('hidden');
                 document.getElementById('error-404').classList.remove('hidden');
                 return;
               }
               throw new Error('Failed to fetch post');
             }

             const post = await response.json();
      
      // Update page title
      document.title = `${post.title} - Firehose`;
      
      // Render post content
      const postContent = `
        <article class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
          <div class="p-6 border-b border-gray-200 dark:border-gray-700">
            <div class="flex items-start space-x-4">
              
              <!-- Vote Column -->
              <div class="flex flex-col items-center space-y-2 flex-shrink-0">
                <button class="text-gray-400 hover:text-orange-600 dark:hover:text-orange-400 transition-colors vote-btn" data-vote="up" data-post-id="${post.id}">
                  <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd"></path>
                  </svg>
                </button>
                <span class="text-lg font-bold text-gray-700 dark:text-gray-300">${post.score || 0}</span>
                <button class="text-gray-400 hover:text-red-600 dark:hover:text-red-400 transition-colors vote-btn" data-vote="down" data-post-id="${post.id}">
                  <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                  </svg>
                </button>
              </div>

              <!-- Post Content -->
              <div class="flex-1 min-w-0">
                <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-3">${post.title}</h1>
                
                <!-- Featured Image (extracted from markdown or URL) -->
                <div id="featured-image-${post.id}" class="mb-4 hidden">
                  <img class="w-full max-w-2xl rounded-lg shadow-sm" alt="Featured image" />
                </div>
                
                ${post.type === 'link' && post.url ? `
                  <div class="mb-4">
                    <a href="${post.url}" target="_blank" rel="noopener noreferrer" class="inline-flex items-center space-x-2 text-orange-600 dark:text-orange-400 hover:text-orange-700 dark:hover:text-orange-500 text-sm font-medium">
                      <span>${post.domain || new URL(post.url).hostname}</span>
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                      </svg>
                    </a>
                  </div>
                ` : ''}
                
                                       <!-- Author and Meta Info -->
                       <div class="flex items-center justify-between">
                         <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                           <div class="flex items-center space-x-2">
                             <img src="${post.author_avatar_url || '/default-avatar.svg'}" alt="${post.author_display_name}" class="w-8 h-8 rounded-full">
                             <div class="flex flex-col">
                               <a href="/u/${post.author_id}" class="font-medium text-gray-900 dark:text-white hover:text-orange-600 dark:hover:text-orange-400">${post.author_display_name}</a>
                             </div>
                           </div>
                           <span>â€¢</span>
                           <time>${getTimeAgo(post.created_at)}</time>
                         </div>
                         
                         <!-- Edit button (visible only if user can edit) -->
                         ${post.can_edit ? `
                           <a href="/p/${post.slug}/edit" class="inline-flex items-center space-x-1 text-sm text-orange-600 dark:text-orange-400 hover:text-orange-700 dark:hover:text-orange-500 font-medium transition-colors">
                             <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                               <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                             </svg>
                             <span>Edit</span>
                           </a>
                         ` : ''}
                       </div>
              </div>
            </div>
          </div>

          ${post.type === 'self' && post.body_markdown ? `
            <div class="p-6">
              <div class="prose prose-gray dark:prose-invert max-w-none" id="post-body"></div>
            </div>
          ` : ''}
        </article>
      `;
      
      document.getElementById('post-content').innerHTML = postContent;
      
      // Extract and display featured image
      extractAndDisplayFeaturedImage(post);
      
      // Render markdown if exists
      if (post.type === 'self' && post.body_markdown) {
        const bodyDiv = document.getElementById('post-body');
        // Enhanced markdown rendering with dofollow links
        let html = post.body_markdown
          // Headers
          .replace(/^### (.*$)/gim, '<h3>$1</h3>')
          .replace(/^## (.*$)/gim, '<h2>$1</h2>')
          .replace(/^# (.*$)/gim, '<h1>$1</h1>')
          // Bold and italic
          .replace(/\*\*\*(.*)\*\*\*/gim, '<strong><em>$1</em></strong>')
          .replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>')
          .replace(/\*(.*)\*/gim, '<em>$1</em>')
          // Links with dofollow (no rel="nofollow")
          .replace(/\[([^\]]*)\]\(([^\)]*)\)/gim, '<a href="$2" target="_blank" class="text-orange-600 hover:text-orange-700 underline">$1</a>')
          // Line breaks
          .replace(/\n\n/g, '</p><p>')
          .replace(/\n/g, '<br>');
        
        // Wrap in paragraphs
        html = '<p>' + html + '</p>';
        // Clean up empty paragraphs
        html = html.replace(/<p><\/p>/g, '');
        
        bodyDiv.innerHTML = html;
      }
      
      // Show content, hide loading
      document.getElementById('loading').classList.add('hidden');
      document.getElementById('post-content').classList.remove('hidden');
      
      // Setup vote handlers
      setupVoteHandlers();
      
    } catch (error) {
      console.error('Failed to load post:', error);
      document.getElementById('loading').classList.add('hidden');
      document.getElementById('error-404').classList.remove('hidden');
    }
  });
  
  function getTimeAgo(timestamp) {
    const now = Date.now();
    // Convert timestamp from seconds to milliseconds if needed
    const postTime = timestamp > 1000000000000 ? timestamp : timestamp * 1000;
    const diff = now - postTime;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (days > 0) return `${days}d ago`;
    if (hours > 0) return `${hours}h ago`;
    if (minutes > 0) return `${minutes}m ago`;
    return 'just now';
  }
  
  function extractAndDisplayFeaturedImage(post) {
    let imageUrl = null;
    
    // 1. First priority: image_url from form (user-provided image)
    if (post.image_url) {
      imageUrl = post.image_url;
    }
    // 2. Second priority: if it's a link post with direct image URL
    else if (post.type === 'link' && post.url) {
      const url = post.url.toLowerCase();
      if (url.match(/\.(jpg|jpeg|png|gif|webp|svg)(\?|$)/)) {
        imageUrl = post.url;
      }
    }
    // 3. Third priority: extract first image from markdown content
    else if (post.body_markdown) {
      // Match markdown image syntax: ![alt](url)
      const imageMatch = post.body_markdown.match(/!\[.*?\]\((https?:\/\/[^\s)]+)\)/);
      if (imageMatch) {
        imageUrl = imageMatch[1];
      }
    }
    
    // 3. Display the image if found
    if (imageUrl) {
      const imageContainer = document.getElementById(`featured-image-${post.id}`);
      const img = imageContainer.querySelector('img');
      
      img.src = imageUrl;
      img.alt = post.title;
      imageContainer.classList.remove('hidden');
      
      // Handle image load errors
      img.onerror = function() {
        imageContainer.classList.add('hidden');
      };
    }
  }
  
  function setupVoteHandlers() {
    document.querySelectorAll('.vote-btn').forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        
        const authToken = localStorage.getItem('auth_token');
        if (!authToken) {
          window.location.href = '/login';
          return;
        }
        
        const voteType = button.dataset.vote;
        const postId = button.dataset.postId;
        
        try {
          const response = await fetch(`/api/posts/${postId}/vote`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${authToken}`
            },
            body: JSON.stringify({ vote_type: voteType })
          });
          
          if (response.ok) {
            // Reload page to show updated score
            window.location.reload();
          } else if (response.status === 401) {
            localStorage.removeItem('auth_token');
            window.location.href = '/login';
          } else {
            const result = await response.json();
            alert(result.error || 'Failed to vote');
          }
        } catch (error) {
          console.error('Vote error:', error);
          alert('Failed to vote');
        }
      });
    });
  }
</script>
</BaseLayout>
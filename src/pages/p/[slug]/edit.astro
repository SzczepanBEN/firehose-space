---
import BaseLayout from '../../../layouts/BaseLayout.astro';

// Dynamic route - disable prerendering for server-side rendering
export const prerender = false;

const { slug } = Astro.params;

// Default SEO content (will be updated client-side)
const canonicalUrl = `https://firehose.space/p/${slug}/edit`;
---

<BaseLayout
  title="Edit Post - Firehose"
  description="Edit your post on Firehose.space"
  canonicalUrl={canonicalUrl}
>

  <div class="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    
    <!-- Loading State -->
    <div id="loading" class="text-center py-12">
      <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500"></div>
      <p class="mt-4 text-gray-600 dark:text-gray-400">Loading post...</p>
    </div>

    <!-- Not Found / No Permission -->
    <div id="error-state" class="hidden text-center py-12">
      <div class="mx-auto h-12 w-12 bg-red-500 rounded-full flex items-center justify-center mb-6">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
        </svg>
      </div>
      <h3 id="error-title" class="text-lg font-medium text-gray-900 dark:text-white mb-2">Error</h3>
      <p id="error-message" class="text-gray-500 dark:text-gray-400 mb-6">Something went wrong</p>
      <a href="/" class="bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">Go Home</a>
    </div>

    <!-- Edit Form Container -->
    <div id="edit-container" class="hidden">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
          Edit Post
        </h1>
        <p class="text-gray-600 dark:text-gray-400">
          Make changes to your post. You have <span id="time-remaining" class="font-semibold text-orange-600"></span> left to edit.
        </p>
      </div>

      <!-- Guidelines -->
      <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-8">
        <h3 class="text-sm font-semibold text-blue-900 dark:text-blue-200 mb-2">Edit Guidelines:</h3>
        <ul class="text-sm text-blue-800 dark:text-blue-300 space-y-1">
          <li>‚Ä¢ Posts can only be edited within 2 hours of creation</li>
          <li>‚Ä¢ You can only edit the title, content, and image URL</li>
          <li>‚Ä¢ Post type (link vs. self) cannot be changed</li>
          <li>‚Ä¢ Self-posts support Markdown formatting</li>
        </ul>
      </div>

      <!-- Edit Form -->
      <form id="edit-form" class="space-y-6">
        
        <!-- Post Type Display (read-only) -->
        <div>
          <label class="text-base font-medium text-gray-900 dark:text-white">Post Type</label>
          <div id="post-type-display" class="mt-2 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-600">
            <span id="post-type-text" class="text-sm text-gray-700 dark:text-gray-300"></span>
          </div>
        </div>

        <!-- Title -->
        <div>
          <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Title *
          </label>
          <input 
            type="text" 
            id="title" 
            name="title" 
            required 
            maxlength="200"
            class="block w-full border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-orange-500 focus:border-orange-500 dark:bg-gray-800 dark:text-white"
            placeholder="What's this about? Make it descriptive and engaging..."
          >
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
            <span id="title-count">0</span>/200 characters
          </p>
        </div>

        <!-- URL Field (for link posts - read only) -->
        <div id="url-field" class="hidden">
          <label for="url" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            URL (cannot be changed)
          </label>
          <input 
            type="url" 
            id="url" 
            name="url" 
            readonly
            class="block w-full border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-gray-50 dark:bg-gray-700 dark:text-white cursor-not-allowed"
          >
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
            The original URL cannot be modified after publication.
          </p>
        </div>

        <!-- Content Field (for self posts) -->
        <div id="content-field" class="hidden">
          <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Content *
          </label>
          <textarea 
            id="content" 
            name="content" 
            rows="15"
            class="block w-full border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-orange-500 focus:border-orange-500 dark:bg-gray-800 dark:text-white font-mono text-sm"
            placeholder="Write your article here. Supports Markdown formatting..."
          ></textarea>
          <div class="mt-2 flex justify-between text-sm text-gray-500 dark:text-gray-400">
            <span>Supports Markdown formatting</span>
            <span><span id="content-count">0</span> characters</span>
          </div>
        </div>

        <!-- Optional Image URL -->
        <div>
          <label for="image-url" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Image URL (optional)
          </label>
          <input 
            type="url" 
            id="image-url" 
            name="image-url" 
            class="block w-full border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-orange-500 focus:border-orange-500 dark:bg-gray-800 dark:text-white"
            placeholder="https://example.com/image.jpg"
          >
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
            Optional thumbnail image. For link posts, we'll try to auto-detect from the page.
          </p>
        </div>

        <!-- Submit Button -->
        <div class="flex justify-between">
          <div>
            <button 
              type="button" 
              id="cancel-edit"
              class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg font-medium transition-colors mr-4"
            >
              Cancel
            </button>
          </div>
          <div>
            <button 
              type="submit" 
              id="save-changes"
              class="bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
            >
              Save Changes
            </button>
          </div>
        </div>

      </form>
    </div>
  </div>

<script>
  // Load post data and render edit form
  document.addEventListener('DOMContentLoaded', async () => {
    const slug = window.location.pathname.split('/p/')[1].replace('/edit', '');

    try {
      // Check authentication first
      const authToken = localStorage.getItem('auth_token');
      if (!authToken) {
        showError('Authentication Required', 'You must be logged in to edit posts.');
        return;
      }

      // Get post data
      const response = await fetch(`/api/posts/${slug}`, {
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      });

      if (!response.ok) {
        if (response.status === 404) {
          showError('Post Not Found', 'The post you\'re trying to edit doesn\'t exist.');
        } else {
          showError('Error', 'Failed to load post data.');
        }
        return;
      }

      const post = await response.json();

      // Check if user can edit
      if (!post.can_edit) {
        if (!post.is_author) {
          showError('Permission Denied', 'You can only edit your own posts.');
        } else {
          showError('Edit Window Expired', 'Posts can only be edited within 2 hours of creation.');
        }
        return;
      }

      // Update page title
      document.title = `Edit: ${post.title} - Firehose`;

      // Populate form
      populateForm(post);

      // Show edit container
      document.getElementById('loading').classList.add('hidden');
      document.getElementById('edit-container').classList.remove('hidden');

      // Setup event listeners
      setupFormHandlers();
      updateTimeRemaining(post.created_at);

      // Update time remaining every minute
      setInterval(() => updateTimeRemaining(post.created_at), 60000);

    } catch (error) {
      console.error('Failed to load post:', error);
      showError('Error', 'Failed to load post data.');
    }
  });

  function showError(title, message) {
    document.getElementById('loading').classList.add('hidden');
    document.getElementById('error-title').textContent = title;
    document.getElementById('error-message').textContent = message;
    document.getElementById('error-state').classList.remove('hidden');
  }

  function populateForm(post) {
    // Post type display
    const postTypeText = post.type === 'link' ? 
      'üîó Link Post - Shares a link from around the web' : 
      'üìù Self Post - Your own article or text content';
    document.getElementById('post-type-text').textContent = postTypeText;

    // Title
    document.getElementById('title').value = post.title;
    updateTitleCount();

    // URL field (for link posts)
    if (post.type === 'link') {
      document.getElementById('url-field').classList.remove('hidden');
      document.getElementById('url').value = post.url || '';
    }

    // Content field (for self posts)
    if (post.type === 'self') {
      document.getElementById('content-field').classList.remove('hidden');
      document.getElementById('content').value = post.body_markdown || '';
      updateContentCount();
    }

    // Image URL
    document.getElementById('image-url').value = post.image_url || '';
  }

  function updateTimeRemaining(createdAt) {
    const now = Math.floor(Date.now() / 1000);
    const postTime = createdAt;
    const twoHours = 2 * 60 * 60; // 2 hours in seconds
    const timeLeft = twoHours - (now - postTime);

    if (timeLeft <= 0) {
      document.getElementById('time-remaining').textContent = 'expired';
      document.getElementById('save-changes').disabled = true;
      document.getElementById('save-changes').classList.add('opacity-50', 'cursor-not-allowed');
    } else {
      const hours = Math.floor(timeLeft / 3600);
      const minutes = Math.floor((timeLeft % 3600) / 60);
      
      let timeText = '';
      if (hours > 0) {
        timeText = `${hours}h ${minutes}m`;
      } else {
        timeText = `${minutes}m`;
      }
      
      document.getElementById('time-remaining').textContent = timeText;
    }
  }

  function setupFormHandlers() {
    const titleInput = document.getElementById('title');
    const contentTextarea = document.getElementById('content');
    const editForm = document.getElementById('edit-form');
    const cancelButton = document.getElementById('cancel-edit');

    // Title character count
    titleInput.addEventListener('input', updateTitleCount);

    // Content character count
    if (contentTextarea) {
      contentTextarea.addEventListener('input', updateContentCount);
    }

    // Cancel button
    cancelButton.addEventListener('click', () => {
      const slug = window.location.pathname.split('/p/')[1].replace('/edit', '');
      window.location.href = `/p/${slug}`;
    });

    // Form submission
    editForm.addEventListener('submit', handleFormSubmit);
  }

  function updateTitleCount() {
    const title = document.getElementById('title').value;
    document.getElementById('title-count').textContent = title.length;
  }

  function updateContentCount() {
    const content = document.getElementById('content')?.value || '';
    const countEl = document.getElementById('content-count');
    if (countEl) {
      countEl.textContent = content.length;
    }
  }

  async function handleFormSubmit(e) {
    e.preventDefault();

    const slug = window.location.pathname.split('/p/')[1].replace('/edit', '');
    const saveButton = document.getElementById('save-changes');

    // Disable submit button
    saveButton.disabled = true;
    saveButton.textContent = 'Saving...';

    try {
      const formData = new FormData(e.target);
      
      const updateData = {
        title: formData.get('title'),
        image_url: formData.get('image-url') || null
      };

      // Add content for self posts
      const contentField = document.getElementById('content');
      if (contentField && !contentField.classList.contains('hidden')) {
        updateData.content = formData.get('content');
      }

      const authToken = localStorage.getItem('auth_token');
      if (!authToken) {
        throw new Error('Not authenticated');
      }

      const response = await fetch(`/api/posts/${slug}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(updateData)
      });

      const result = await response.json();

      if (response.ok) {
        // Redirect to post page
        window.location.href = `/p/${slug}`;
      } else {
        throw new Error(result.error || 'Failed to update post');
      }

    } catch (error) {
      console.error('Edit error:', error);
      alert(error.message || 'Failed to update post');
    } finally {
      // Re-enable submit button
      saveButton.disabled = false;
      saveButton.textContent = 'Save Changes';
    }
  }
</script>

</BaseLayout>
